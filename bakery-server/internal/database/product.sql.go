// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
;

INSERT INTO products (
    id,
    name,
    description,
    brand,
    by_request,
    discount,
    price,
    stock,
    issued,
    images,
    category_id,
    created_at,
    updated_at
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, description, brand, by_request, discount, price, stock, issued, images, category_id, created_at, updated_at, deleted_at
`

type CreateProductParams struct {
	ID          string
	Name        string
	Description string
	Brand       string
	ByRequest   int64
	Discount    float64
	Price       float64
	Stock       int64
	Issued      int64
	Images      string
	CategoryID  string
	CreatedAt   string
	UpdatedAt   string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Brand,
		arg.ByRequest,
		arg.Discount,
		arg.Price,
		arg.Stock,
		arg.Issued,
		arg.Images,
		arg.CategoryID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Brand,
		&i.ByRequest,
		&i.Discount,
		&i.Price,
		&i.Stock,
		&i.Issued,
		&i.Images,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products SET 
    deleted_at = ?
WHERE id = ?
`

type DeleteProductParams struct {
	DeletedAt sql.NullString
	ID        string
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, arg.DeletedAt, arg.ID)
	return err
}

const getProductById = `-- name: GetProductById :one
;

select id, name, description, brand, by_request, discount, price, stock, issued, images, category_id, created_at, updated_at, deleted_at
from products
where products.id = ? and products.deleted_at is null
`

func (q *Queries) GetProductById(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Brand,
		&i.ByRequest,
		&i.Discount,
		&i.Price,
		&i.Stock,
		&i.Issued,
		&i.Images,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
select id, name, description, brand, by_request, discount, price, stock, issued, images, category_id, created_at, updated_at, deleted_at
from products
where products.deleted_at is null
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Brand,
			&i.ByRequest,
			&i.Discount,
			&i.Price,
			&i.Stock,
			&i.Issued,
			&i.Images,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET
    description = ?,
    brand = ?,
    by_request = ?,
    discount = ?,
    price = ?,
    stock = ?,
    issued = ?,
    images = ?,
    category_id = ?,
    updated_at = ?
WHERE id = ?
RETURNING id, name, description, brand, by_request, discount, price, stock, issued, images, category_id, created_at, updated_at, deleted_at
`

type UpdateProductParams struct {
	Description string
	Brand       string
	ByRequest   int64
	Discount    float64
	Price       float64
	Stock       int64
	Issued      int64
	Images      string
	CategoryID  string
	UpdatedAt   string
	ID          string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Description,
		arg.Brand,
		arg.ByRequest,
		arg.Discount,
		arg.Price,
		arg.Stock,
		arg.Issued,
		arg.Images,
		arg.CategoryID,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Brand,
		&i.ByRequest,
		&i.Discount,
		&i.Price,
		&i.Stock,
		&i.Issued,
		&i.Images,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateProductName = `-- name: UpdateProductName :one
UPDATE products SET
    name = ?,
    updated_at = ?
WHERE id = ?
RETURNING id, name, description, brand, by_request, discount, price, stock, issued, images, category_id, created_at, updated_at, deleted_at
`

type UpdateProductNameParams struct {
	Name      string
	UpdatedAt string
	ID        string
}

func (q *Queries) UpdateProductName(ctx context.Context, arg UpdateProductNameParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductName, arg.Name, arg.UpdatedAt, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Brand,
		&i.ByRequest,
		&i.Discount,
		&i.Price,
		&i.Stock,
		&i.Issued,
		&i.Images,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
